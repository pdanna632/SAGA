package com.saga.telegram.service;

import java.util.List;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.saga.model.Arbitro;
import com.saga.model.Partido;
import com.saga.telegram.bot.SAGATelegramBot;
import com.saga.utils.ExcelArbitroReader;

@Service
public class TelegramNotificationService {
    
    private static final Logger logger = Logger.getLogger(TelegramNotificationService.class.getName());
    
    @Autowired
    private SAGATelegramBot telegramBot;
    
    @Autowired
    private TelegramAuthService authService;
    
    /**
     * Env√≠a notificaci√≥n a un √°rbitro cuando es asignado a un partido
     */
    public boolean notificarAsignacionPartido(String cedulaArbitro, Partido partido) {
        try {
            // Buscar el √°rbitro por c√©dula
            Arbitro arbitro = buscarArbitroPorCedula(cedulaArbitro);
            if (arbitro == null) {
                logger.warning("√Årbitro no encontrado con c√©dula: " + cedulaArbitro);
                return false;
            }
            
            // Verificar si el √°rbitro tiene Chat ID vinculado
            String chatId = arbitro.getChatId();
            if (chatId == null || chatId.trim().isEmpty()) {
                logger.info("√Årbitro " + arbitro.getNombre() + " no tiene Telegram vinculado");
                return false;
            }
            
            // Crear mensaje de notificaci√≥n
            String mensaje = generarMensajeAsignacion(arbitro, partido);
            
            // Enviar notificaci√≥n
            telegramBot.sendMessage(Long.parseLong(chatId), mensaje);
            
            logger.info("Notificaci√≥n enviada a " + arbitro.getNombre() + " (Chat ID: " + chatId + ")");
            return true;
            
        } catch (Exception e) {
            logger.severe("Error enviando notificaci√≥n: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Env√≠a notificaci√≥n a m√∫ltiples √°rbitros
     */
    public void notificarAsignacionMultiple(List<String> cedulasArbitros, Partido partido) {
        for (String cedula : cedulasArbitros) {
            notificarAsignacionPartido(cedula, partido);
        }
    }
    
    /**
     * Busca un √°rbitro por c√©dula en el archivo Excel
     */
    private Arbitro buscarArbitroPorCedula(String cedula) {
        try {
            List<Arbitro> arbitros = ExcelArbitroReader.leerArbitros("src/main/resources/data/Arbitros.xlsx");
            
            return arbitros.stream()
                    .filter(a -> a.getCedula().equals(cedula))
                    .findFirst()
                    .orElse(null);
                    
        } catch (Exception e) {
            logger.severe("Error buscando √°rbitro por c√©dula: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Genera el mensaje de notificaci√≥n de asignaci√≥n
     */
    private String generarMensajeAsignacion(Arbitro arbitro, Partido partido) {
        return String.format("""
               ‚öΩ *¬°Nueva Asignaci√≥n de Partido!*
               
               Hola *%s*, has sido asignado a un nuevo partido:
               
               üìÖ *Fecha:* %s
               ‚è∞ *Hora:* %s
               üèüÔ∏è *Categor√≠a:* %s
               üìç *Municipio:* %s
               
               üÜö *Equipos:*
               üè† Local: %s
               üöå Visitante: %s
               
               üìã *Detalles:*
               üÜî ID Partido: %s
               üèüÔ∏è Escenario: %s
               
               üí° *Recuerda confirmar tu disponibilidad en el sistema SAGA*
               
               ¬øNecesitas m√°s informaci√≥n? Escribe /info para ver tus datos.
               """,
               arbitro.getNombre().split(" ")[0],
               partido.getFecha(),
               partido.getHora(),
               partido.getCategoria(),
               partido.getMunicipio(),
               partido.getEquipoLocal(),
               partido.getEquipoVisitante(),
               partido.getId(),
               partido.getEscenario());
    }
    
    /**
     * Env√≠a recordatorio de partido pr√≥ximo
     */
    public boolean enviarRecordatorioPartido(String cedulaArbitro, Partido partido, int horasAntes) {
        try {
            Arbitro arbitro = buscarArbitroPorCedula(cedulaArbitro);
            if (arbitro == null || arbitro.getChatId() == null) {
                return false;
            }
            
            String mensaje = String.format("""
                   ‚è∞ *Recordatorio de Partido*
                   
                   Hola *%s*, tu partido es en *%d horas*:
                   
                   üìÖ %s a las %s
                   üÜö %s vs %s
                   üìç %s
                   
                   ¬°No olvides llegar con tiempo!
                   """,
                   arbitro.getNombre().split(" ")[0],
                   horasAntes,
                   partido.getFecha(),
                   partido.getHora(),
                   partido.getEquipoLocal(),
                   partido.getEquipoVisitante(),
                   partido.getMunicipio());
            
            telegramBot.sendMessage(Long.parseLong(arbitro.getChatId()), mensaje);
            return true;
            
        } catch (Exception e) {
            logger.severe("Error enviando recordatorio: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Verifica qu√© √°rbitros tienen Telegram vinculado
     */
    public void verificarArbitrosConTelegram() {
        try {
            List<Arbitro> arbitros = ExcelArbitroReader.leerArbitros("src/main/resources/data/Arbitros.xlsx");
            
            long conTelegram = arbitros.stream()
                    .filter(a -> a.getChatId() != null && !a.getChatId().trim().isEmpty())
                    .count();
            
            logger.info("√Årbitros totales: " + arbitros.size());
            logger.info("√Årbitros con Telegram vinculado: " + conTelegram);
            logger.info("√Årbitros sin Telegram: " + (arbitros.size() - conTelegram));
            
        } catch (Exception e) {
            logger.severe("Error verificando √°rbitros: " + e.getMessage());
        }
    }
}
