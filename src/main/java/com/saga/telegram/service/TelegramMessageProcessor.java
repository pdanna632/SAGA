package com.saga.telegram.service;

import java.util.logging.Logger;

import org.springframework.stereotype.Service;

import com.saga.model.Arbitro;
import com.saga.utils.ExcelArbitroWriter;

@Service
public class TelegramMessageProcessor {
    
    private static final Logger logger = Logger.getLogger(TelegramMessageProcessor.class.getName());
    
    /**
     * Procesa un mensaje de texto recibido
     */
    public String processMessage(String messageText, Long chatId, String userName, String userHandle) {
        if (messageText == null || messageText.trim().isEmpty()) {
            return "ü§î No entend√≠ tu mensaje. Escribe /ayuda para ver los comandos disponibles.";
        }
        
        String text = messageText.toLowerCase().trim();
        
        // Comandos b√°sicos
        if (text.equals("/start") || text.equals("hola") || text.equals("hi") || text.equals("buenas")) {
            return generateWelcomeMessage(userName, chatId);
        }
        
        if (text.equals("/ayuda") || text.equals("ayuda") || text.equals("help")) {
            return generateHelpMessage();
        }
        
        if (text.equals("/info") || text.contains("mi info") || text.contains("mis datos")) {
            return generateUserInfo(chatId, userName);
        }
        
        if (text.contains("partidos") || text.contains("partido")) {
            return "‚öΩ *Mis Partidos*\n\nFuncionalidad en desarrollo.\n" +
                   "Pronto podr√°s consultar tus partidos asignados aqu√≠.";
        }
        
        if (text.contains("disponibilidad") || text.contains("disponible")) {
            return "üìÖ *Disponibilidad*\n\nFuncionalidad en desarrollo.\n" +
                   "Pronto podr√°s gestionar tu disponibilidad aqu√≠.";
        }
        
        if (text.contains("contacto") || text.contains("contactos")) {
            return "üìû *Contactos*\n\nFuncionalidad en desarrollo.\n" +
                   "Pronto podr√°s consultar contactos de otros √°rbitros.";
        }
        
        // Respuesta por defecto
        return "ü§î No entend√≠ tu consulta.\n\n" +
               "Escribe /ayuda para ver los comandos disponibles o " +
               "usa el men√∫ de botones para navegar.";
    }
    
    /**
     * Procesa callbacks de botones inline
     */
    public String processCallbackQuery(String callbackData, Long chatId, String userName) {
        switch (callbackData) {
            case "mi_info":
                return generateUserInfo(chatId, userName);
            case "mis_partidos":
                return "‚öΩ *Mis Pr√≥ximos Partidos*\n\n" +
                       "Funcionalidad en desarrollo.\n" +
                       "Aqu√≠ podr√°s ver:\n" +
                       "‚Ä¢ Partidos asignados\n" +
                       "‚Ä¢ Fechas y horarios\n" +
                       "‚Ä¢ Equipos participantes\n" +
                       "‚Ä¢ Ubicaci√≥n de canchas";
            case "disponibilidad":
                return "üìÖ *Gesti√≥n de Disponibilidad*\n\n" +
                       "Funcionalidad en desarrollo.\n" +
                       "Aqu√≠ podr√°s:\n" +
                       "‚Ä¢ Marcar tu disponibilidad\n" +
                       "‚Ä¢ Ver calendario de fechas\n" +
                       "‚Ä¢ Actualizar horarios libres";
            case "contactos":
                return "üìû *Directorio de Contactos*\n\n" +
                       "Funcionalidad en desarrollo.\n" +
                       "Aqu√≠ podr√°s:\n" +
                       "‚Ä¢ Buscar otros √°rbitros\n" +
                       "‚Ä¢ Ver informaci√≥n de contacto\n" +
                       "‚Ä¢ Acceder a directorio completo";
            case "ayuda":
                return generateHelpMessage();
            default:
                return "ü§î Opci√≥n no reconocida.";
        }
    }
    
    /**
     * Genera mensaje de bienvenida
     */
    private String generateWelcomeMessage(String userName, Long chatId) {
        // Intentar buscar √°rbitro por chat ID o username
        // Por ahora solo mensaje gen√©rico
        return String.format(
            "üèÜ *¬°Hola %s!*\n\n" +
            "Bienvenido al bot de SAGA (Sistema Automatizado de Gesti√≥n Arbitral).\n\n" +
            "Soy tu asistente para consultas sobre arbitraje.\n\n" +
            "*¬øEn qu√© puedo ayudarte?*\n\n" +
            "‚Ä¢ üìã Consultar tu informaci√≥n\n" +
            "‚Ä¢ ‚öΩ Ver tus partidos\n" +
            "‚Ä¢ üìÖ Gestionar disponibilidad\n" +
            "‚Ä¢ üìû Buscar contactos\n\n" +
            "Usa los botones del men√∫ o escribe /ayuda para m√°s informaci√≥n.",
            userName
        );
    }
    
    /**
     * Genera mensaje de ayuda
     */
    private String generateHelpMessage() {
        return """
               üèÜ *COMANDOS DISPONIBLES*
               
               üìã *Informaci√≥n personal:*
               ‚Ä¢ `/info` - Ver tus datos como √°rbitro
               ‚Ä¢ `mi info` - Ver tus datos
               
               ‚öΩ *Partidos:*
               ‚Ä¢ `partidos` - Ver tus pr√≥ximos partidos
               
               üìÖ *Disponibilidad:*
               ‚Ä¢ `disponibilidad` - Gestionar tu disponibilidad
               
               üìû *Contactos:*
               ‚Ä¢ `contactos` - Buscar contacto de √°rbitro
               
               ‚ùì *Ayuda:*
               ‚Ä¢ `/ayuda` - Ver este mensaje
               ‚Ä¢ `/start` - Mensaje de bienvenida
               
               üí° *Tambi√©n puedes:*
               ‚Ä¢ Escribir de forma natural
               ‚Ä¢ Usar los botones del men√∫
               ‚Ä¢ Combinar comandos con texto libre
               
               ü§ñ *Ejemplo:* "¬øCu√°les son mis partidos de esta semana?"
               """;
    }
    
    /**
     * Genera informaci√≥n del usuario
     */
    private String generateUserInfo(Long chatId, String userName) {
        try {
            // Buscar √°rbitro por chat ID (implementar en el futuro)
            // Por ahora intentamos buscar por nombre o retornamos info gen√©rica
            
            String rutaArchivo = "src/main/resources/data/Arbitros.xlsx";
            // TODO: Implementar b√∫squeda por chat ID cuando se almacene
            
            return String.format(
                "üë§ *Informaci√≥n de Usuario*\n\n" +
                "üìù *Nombre en Telegram:* %s\n" +
                "üÜî *Chat ID:* `%s`\n\n" +
                "‚ùó *Nota:* Para acceder a tu informaci√≥n completa como √°rbitro, " +
                "necesitamos vincular tu cuenta de Telegram con tu registro en SAGA.\n\n" +
                "Por favor, proporciona tu n√∫mero de tel√©fono o c√©dula para " +
                "vincular tu cuenta autom√°ticamente.",
                userName,
                chatId
            );
            
        } catch (Exception e) {
            logger.warning("Error obteniendo informaci√≥n del usuario: " + e.getMessage());
            return "‚ùå Error obteniendo tu informaci√≥n.\n\n" +
                   "Por favor, intenta m√°s tarde o contacta al administrador.";
        }
    }
    
    /**
     * Busca un √°rbitro por diferentes criterios
     */
    private Arbitro buscarArbitro(String criterio) {
        try {
            String rutaArchivo = "src/main/resources/data/Arbitros.xlsx";
            
            // Intentar b√∫squeda por tel√©fono
            if (criterio.matches("\\d+")) {
                return ExcelArbitroWriter.buscarPorTelefono(rutaArchivo, criterio);
            }
            
            // TODO: Implementar b√∫squeda por nombre, c√©dula, etc.
            return null;
            
        } catch (Exception e) {
            logger.warning("Error buscando √°rbitro: " + e.getMessage());
            return null;
        }
    }
}
